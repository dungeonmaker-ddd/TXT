@startuml

' ==========================================
' 🏗️ 探店APP完整系统 - 综合类图设计 v3.0
' 18张表实现完整功能：用户+内容+交易+聊天+话题+媒体+通知
' 设计理念：计算优于存储，JSON灵活扩展，模块化架构
' 业务模块：登录+首页+发现+消息+个人中心+组局+服务订单
' ==========================================

' ===== 核心用户模块 (4表) =====

class User {
    + id : Long
    + username : String  
    + mobile : String
    + password : String
    + status : Integer
    + last_login_time : DateTime
    + created_at : DateTime
    --
    ' 用户基础信息表
    ' id: 用户唯一标识(雪花ID)
    ' username: 登录用户名(唯一,可修改)
    ' mobile: 手机号(唯一,登录凭证,支持+86地区码)
    ' password: 密码哈希值(BCrypt加密)
    ' status: 用户状态(0=禁用,1=正常,2=冻结,3=已注销)
    ' last_login_time: 最后登录时间(用于在线状态判断)
    ' created_at: 注册时间
    ' 
    ' 业务场景：
    ' - 密码登录、验证码登录
    ' - 忘记密码重置流程
    ' - 用户状态管理和权限控制
    ' - 多端登录设备管理
}

class UserProfile {
    + user_id : Long
    + nickname : String
    + avatar : String
    + gender : Integer
    + birthday : Date
    + location_province : String
    + location_city : String
    + bio : String
    + metadata : JSON
    + updated_at : DateTime
    --
    ' 用户资料扩展表
    ' user_id: 关联用户ID(FK)
    ' nickname: 用户昵称(显示名,2-20字符)
    ' avatar: 头像URL(CDN地址)
    ' gender: 性别(0=未知,1=男,2=女)
    ' birthday: 生日(YYYY-MM-DD,用于年龄计算)
    ' location_province: 常居地-省份(如: 广东)
    ' location_city: 常居地-城市(如: 深圳)
    ' bio: 个人介绍(0-30字符)
    ' metadata: 扩展信息JSON
    ' {height, weight, wechat, occupation[], ip_location...}
    ' updated_at: 最后更新时间
    ' 
    ' 业务场景：
    ' - 个人主页资料展示
    ' - 个人信息编辑(昵称/头像/性别/生日/身高/体重/常居地/微信/职业)
    ' - 用户筛选和推荐算法
    ' - 距离计算和同城匹配
}

class UserWallet {
    + user_id : Long
    + balance : Long
    + frozen_amount : Long
    + total_income : Long
    + total_expense : Long
    + version : Integer
    + updated_at : DateTime
    --
    ' 用户钱包表
    ' user_id: 关联用户ID(FK)
    ' balance: 可用余额(分为单位,避免精度问题)
    ' frozen_amount: 冻结金额(订单进行中锁定的金额)
    ' total_income: 累计收入(统计字段)
    ' total_expense: 累计支出(统计字段)
    ' version: 乐观锁版本号(并发控制,防止超支)
    ' updated_at: 最后更新时间
    ' 
    ' 业务场景：
    ' - 服务预订支付(钱包余额/微信/支付宝)
    ' - 组局报名支付
    ' - 金币充值和消费
    ' - 余额提现和转账
}

class Transaction {
    + id : Long
    + user_id : Long
    + amount : Long
    + type : Integer
    + business_type : Integer
    + ref_id : Long
    + order_no : String
    + status : Integer
    + remark : String
    + created_at : DateTime
    --
    ' 统一交易流水表
    ' id: 交易记录ID(雪花ID)
    ' user_id: 用户ID
    ' amount: 交易金额(正数=收入,负数=支出,单位:分)
    ' type: 交易类型(1=充值,2=消费,3=收益,4=退款,5=提现)
    ' business_type: 业务类型(1=游戏陪玩,2=生活服务,3=组局活动,4=打赏)
    ' ref_id: 关联业务ID(订单ID/活动ID/内容ID)
    ' order_no: 第三方订单号(支付宝/微信订单号)
    ' status: 交易状态(0=待支付,1=支付成功,2=已退款,3=失败)
    ' remark: 交易备注(交易说明文字)
    ' created_at: 交易时间
    ' 
    ' 业务场景：
    ' - 钱包充值记录
    ' - 服务订单支付流水
    ' - 组局报名支付记录
    ' - 退款和提现记录
    ' - 财务对账和统计分析
}

' ===== 内容模块 (3表) =====

class Content {
    + id : Long
    + user_id : Long
    + type : Integer
    + title : String
    + content_text : String
    + location_info : JSON
    + data : JSON
    + view_count : Integer
    + like_count : Integer
    + comment_count : Integer
    + share_count : Integer
    + status : Integer
    + created_at : DateTime
    + updated_at : DateTime
    --
    ' 万能内容表(动态/组局活动/技能服务)
    ' id: 内容唯一ID(雪花ID)
    ' user_id: 创建者ID(发布者/发起人/服务提供者)
    ' type: 内容类型(1=动态发布,2=组局活动,3=技能服务)
    ' title: 内容标题(动态标题/活动名称/技能名称)
    ' content_text: 正文内容(支持话题#标签#和@用户)
    ' location_info: 地理位置JSON{province,city,poi_name,lat,lng}
    ' data: 类型特定数据JSON(见下方详细说明)
    ' view_count: 浏览量(实时统计)
    ' like_count: 点赞数(实时统计)
    ' comment_count: 评论数(实时统计)
    ' share_count: 分享数(实时统计)
    ' status: 内容状态(0=草稿,1=已发布,2=已下架,3=审核中,4=审核拒绝)
    ' created_at: 创建时间
    ' updated_at: 最后更新时间
    ' 
    ' data JSON扩展字段详细说明：
    ' 
    ' type=1 动态发布：
    ' {
    '   media_ids: [媒体文件ID数组],
    '   topic_ids: [话题ID数组],
    '   visibility: 可见范围(0=公开,1=关注可见,2=私密)
    ' }
    ' 
    ' type=2 组局活动：
    ' {
    '   activity_type: 活动类型(1=K歌,2=台球,3=私影,4=探店,5=按摩...),
    '   activity_time: 活动开始时间,
    '   duration_hours: 活动时长(小时),
    '   location_detail: {poi_name,address,distance},
    '   participant_limit: {min:最少人数,max:最多人数,current:当前人数},
    '   requirements: {gender:性别要求,age_range:年龄范围,skill_level:技能要求},
    '   fee_info: {fee_type:费用类型(1=免费,2=AA制,3=发起人请客),amount:费用金额,includes:费用包含},
    '   participant_ids: [已报名用户ID数组],
    '   activity_status: 活动状态(1=报名中,2=即将开始,3=进行中,4=已完成,5=已取消)
    ' }
    ' 
    ' type=3 技能服务：
    ' {
    '   skill_type: 技能类型(1=王者荣耀,2=英雄联盟,3=探店,4=按摩...),
    '   service_mode: 服务模式(1=线上,2=线下),
    '   price_info: {unit:计费单位(1=局,2=小时,3=次),amount:价格},
    '   skill_level: 技能等级(段位/星级/认证等级),
    '   service_packages: [服务套餐数组{name,price,description}],
    '   booking_settings: {advance_hours:提前预约小时数,cancel_policy:取消政策}
    ' }
    ' 
    ' 业务场景：
    ' - 发现页面动态发布和浏览
    ' - 组局中心活动创建和报名
    ' - 首页技能服务展示和预订
    ' - 个人主页内容展示(动态/收藏/点赞Tab)
    ' - 内容搜索和筛选
}

class ContentAction {
    + id : Long
    + content_id : Long
    + user_id : Long
    + action : Integer
    + comment_text : String
    + reply_to_id : Long
    + like_status : Integer
    + data : JSON
    + created_at : DateTime
    --
    ' 内容行为统一表(点赞/评论/收藏/报名)
    ' id: 行为记录ID(雪花ID)
    ' content_id: 关联内容ID
    ' user_id: 操作用户ID
    ' action: 行为类型(1=点赞,2=评论,3=收藏,4=分享,5=报名)
    ' comment_text: 评论内容文字(action=2时必填,最多500字符)
    ' reply_to_id: 回复的评论ID(二级评论时使用)
    ' like_status: 点赞状态(0=已取消,1=已点赞,用于点赞/取消切换)
    ' data: 行为扩展数据JSON
    ' {quoted_comment:引用评论,images:评论图片,@mentioned_users:提及用户}
    ' created_at: 行为时间
    ' 
    ' 业务场景：
    ' - 动态点赞/取消点赞
    ' - 发表评论和回复评论(一级评论+二级回复)
    ' - 收藏内容到个人收藏列表
    ' - 分享动态到其他平台
    ' - 组局活动报名
    ' - 消息模块的赞和收藏消息列表
    ' - 消息模块的评论消息列表
}

class UserRelation {
    + id : Long
    + user_id : Long
    + target_id : Long
    + type : Integer
    + relation_status : Integer
    + metadata : JSON
    + created_at : DateTime
    --
    ' 用户关系表(关注/拉黑/屏蔽)
    ' id: 关系记录ID(雪花ID)
    ' user_id: 发起用户ID(主动方)
    ' target_id: 目标用户ID(被动方)
    ' type: 关系类型(1=关注,2=拉黑,3=屏蔽,4=特别关注)
    ' relation_status: 关系状态(0=已取消,1=生效中)
    ' metadata: 扩展信息JSON{remark:备注,group_id:分组ID}
    ' created_at: 建立关系时间
    ' 
    ' 业务场景：
    ' - 用户关注和取消关注
    ' - 粉丝列表查询(反向查询target_id=用户ID)
    ' - 互相关注判断(双向关系存在)
    ' - 消息模块的粉丝消息通知
    ' - 个人主页社交数据统计
    ' - 用户拉黑和屏蔽管理
    ' - 发现页面关注Tab内容筛选
}

' ===== 交易模块 (1表) =====

class ServiceOrder {
    + id : Long
    + buyer_id : Long
    + seller_id : Long
    + content_id : Long
    + order_type : Integer
    + amount : Long
    + duration : Integer
    + contact_info : JSON
    + appointment_time : DateTime
    + status : Integer
    + data : JSON
    + created_at : DateTime
    + updated_at : DateTime
    --
    ' 服务订单表(游戏陪玩/生活服务/组局活动)
    ' id: 订单唯一ID(雪花ID)
    ' buyer_id: 买家用户ID(服务购买者/活动报名者)
    ' seller_id: 卖家用户ID(服务提供者/活动发起人)
    ' content_id: 关联内容ID(技能服务ID/活动ID)
    ' order_type: 订单类型(1=游戏陪玩,2=生活服务,3=组局报名)
    ' amount: 订单金额(分,68元=6800分)
    ' duration: 服务时长(小时,游戏按局时可为0)
    ' contact_info: 联系信息JSON{name:姓名,phone:电话,remark:备注}
    ' appointment_time: 预约时间(服务开始时间/活动时间)
    ' status: 订单状态(0=待支付,1=已支付,2=服务中,3=已完成,4=已取消,5=已退款)
    ' data: 订单扩展信息JSON
    ' {service_package:选择的套餐,requirements:服务要求,conversation_id:订单会话ID}
    ' created_at: 下单时间
    ' updated_at: 最后更新时间
    ' 
    ' 业务场景：
    ' - 游戏陪玩服务预订(王者荣耀/英雄联盟等)
    ' - 生活服务预订(探店/私影/台球/K歌/按摩)
    ' - 组局活动报名和支付
    ' - 订单确认页面信息展示
    ' - 支付页面订单处理
    ' - 订单管理和取消
    ' - 服务评价和反馈
}

' ===== 话题标签模块 (3表) =====

class Topic {
    + id : Long
    + name : String
    + description : String
    + cover_url : String
    + creator_id : Long
    + participant_count : Integer
    + post_count : Integer
    + heat_score : Integer
    + stats : JSON
    + status : Integer
    + created_at : DateTime
    + updated_at : DateTime
    --
    ' 话题标签表
    ' id: 话题唯一ID(雪花ID)
    ' name: 话题名称(唯一,如: S10全球总决赛,不含#符号)
    ' description: 话题描述(话题介绍文字)
    ' cover_url: 话题封面图URL
    ' creator_id: 创建者ID
    ' participant_count: 参与人数(实时统计缓存)
    ' post_count: 动态数量(实时统计缓存)
    ' heat_score: 热度指数(算法计算,用于热门排序)
    ' stats: 详细统计数据JSON
    ' {daily_post_count:今日新增,trend:热度趋势,top_users:活跃用户}
    ' status: 话题状态(0=禁用,1=正常,2=热门,3=推荐)
    ' created_at: 创建时间
    ' updated_at: 最后更新时间(有新动态时更新)
    ' 
    ' 业务场景：
    ' - 发现页面话题标签点击跳转
    ' - 话题详情页面话题信息展示
    ' - 发布动态时话题选择
    ' - 话题搜索和推荐
    ' - 热门话题排行榜
    ' - 话题趋势分析
}

class ContentTopic {
    + id : Long
    + content_id : Long
    + topic_id : Long
    + created_at : DateTime
    --
    ' 内容话题关联表(多对多中间表)
    ' id: 关联记录ID(雪花ID)
    ' content_id: 内容ID(关联Content表)
    ' topic_id: 话题ID(关联Topic表)
    ' created_at: 关联时间
    ' 
    ' 业务场景：
    ' - 实现Content和Topic的多对多关系
    ' - 一个动态可以关联多个话题(最多5个)
    ' - 一个话题可以包含多个动态
    ' - 话题详情页动态聚合查询
    ' - 动态删除时自动删除关联关系
}

class UserTag {
    + id : Long
    + user_id : Long
    + tag_type : Integer
    + tag_value : String
    + display_order : Integer
    + metadata : JSON
    + created_at : DateTime
    --
    ' 用户标签表(技能/职业/认证/兴趣)
    ' id: 标签记录ID(雪花ID)
    ' user_id: 用户ID
    ' tag_type: 标签类型(1=技能标签,2=职业标签,3=认证标签,4=兴趣标签)
    ' tag_value: 标签值(如: 王者荣耀、模特、实名认证等)
    ' display_order: 显示顺序(用户自定义排序)
    ' metadata: 标签扩展信息JSON
    ' {
    '   技能标签: {skill_level:段位等级,price:服务价格,service_count:服务次数},
    '   职业标签: {verified:是否认证},
    '   认证标签: {cert_type:认证类型(1=实名,2=大神,3=商家),cert_time:认证时间},
    '   兴趣标签: {interest_level:兴趣程度}
    ' }
    ' created_at: 创建时间
    ' 
    ' 业务场景：
    ' - 个人主页技能标签展示
    ' - 职业编辑页面职业管理(最多5个)
    ' - 用户认证标识显示(实名认证/大神认证)
    ' - 首页用户推荐和筛选
    ' - 用户画像构建和精准推荐
}

' ===== 媒体文件模块 (1表) =====

class Media {
    + id : Long
    + uploader_id : Long
    + file_type : Integer
    + file_url : String
    + thumbnail_url : String
    + file_size : Long
    + duration : Integer
    + metadata : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 媒体文件表(图片/视频/音频统一管理)
    ' id: 文件唯一ID(雪花ID)
    ' uploader_id: 上传者ID
    ' file_type: 文件类型(1=图片,2=视频,3=音频)
    ' file_url: 文件访问URL(CDN加速地址)
    ' thumbnail_url: 缩略图URL(视频封面/图片缩略图)
    ' file_size: 文件大小(字节)
    ' duration: 媒体时长(秒,图片为0,音频/视频时使用)
    ' metadata: 文件扩展信息JSON
    ' {width:宽度,height:高度,format:格式,caption:配文,quality:质量}
    ' status: 文件状态(0=已删除,1=正常,2=审核中,3=审核拒绝)
    ' created_at: 上传时间
    ' 
    ' 业务场景：
    ' - 发现页面动态图片/视频展示
    ' - 发布动态时媒体上传(最多9张图片或1个视频)
    ' - 私聊对话图片消息发送
    ' - 个人主页动态媒体展示
    ' - 图片消息点赞互动
    ' - 媒体文件安全审核
}

' ===== 通知推送模块 (1表) =====

class Notification {
    + id : Long
    + user_id : Long
    + type : Integer
    + sub_type : Integer
    + title : String
    + content : String
    + sender_id : Long
    + ref_id : Long
    + data : JSON
    + is_read : Boolean
    + priority : Integer
    + created_at : DateTime
    --
    ' 通知消息表(点赞/评论/关注/系统通知)
    ' id: 通知唯一ID(雪花ID)
    ' user_id: 接收用户ID
    ' type: 通知类型(1=点赞,2=评论,3=关注,4=系统,5=收藏,6=分享)
    ' sub_type: 子类型(点赞:1=动态点赞2=评论点赞,系统:1=公告2=提醒3=安全)
    ' title: 通知标题(如: 完善个人资料)
    ' content: 通知内容(通知详细描述)
    ' sender_id: 发送者ID(互动通知时使用,系统通知为NULL)
    ' ref_id: 关联内容ID(被点赞的内容ID/被评论的内容ID)
    ' data: 扩展数据JSON
    ' {action_id:行为记录ID,content_preview:内容预览,action_url:跳转链接}
    ' is_read: 是否已读(0=未读,1=已读)
    ' priority: 优先级(1=一般,2=普通,3=重要,4=紧急)
    ' created_at: 通知时间
    ' 
    ' 业务场景：
    ' - 消息模块赞和收藏消息页面
    ' - 消息模块评论消息页面
    ' - 消息模块粉丝消息页面
    ' - 消息模块系统通知页面
    ' - 实时消息推送和角标更新
    ' - 未读消息数量统计
}

' ===== 安全审核模块 (1表) =====

class Report {
    + id : Long
    + reporter_id : Long
    + target_id : Long
    + target_type : Integer
    + reason : Integer
    + description : String
    + evidence : JSON
    + handler_id : Long
    + handle_result : String
    + status : Integer
    + created_at : DateTime
    + handled_at : DateTime
    --
    ' 举报记录表(内容安全管理)
    ' id: 举报记录ID(雪花ID)
    ' reporter_id: 举报人ID(举报人信息保密)
    ' target_id: 被举报目标ID
    ' target_type: 目标类型(1=用户,2=动态内容,3=评论,4=活动)
    ' reason: 举报原因(1=垃圾信息,2=不当内容,3=侵权内容,4=虚假信息,5=骚扰他人,6=其他)
    ' description: 详细说明(用户填写的补充说明,最多500字符)
    ' evidence: 证据材料JSON{images:[截图URL数组],description:证据描述}
    ' handler_id: 处理人ID(审核人员ID)
    ' handle_result: 处理结果(处理措施和结果说明)
    ' status: 处理状态(0=待处理,1=处理中,2=已处理,3=已驳回)
    ' created_at: 举报时间
    ' handled_at: 处理完成时间
    ' 
    ' 业务场景：
    ' - 动态详情页面举报功能
    ' - 话题详情页面举报动态
    ' - 评论举报和内容管理
    ' - 用户举报和账号管理
    ' - 24小时处理承诺
    ' - 举报状态查询和反馈
}

' ===== 搜索历史模块 (1表) =====

class SearchHistory {
    + id : Long
    + user_id : Long
    + keyword : String
    + search_type : Integer
    + result_count : Integer
    + clicked_result_id : Long
    + created_at : DateTime
    --
    ' 搜索历史表(用户搜索行为记录)
    ' id: 搜索记录ID(雪花ID)
    ' user_id: 搜索用户ID
    ' keyword: 搜索关键词(用户输入的搜索词)
    ' search_type: 搜索类型(1=全部,2=用户,3=动态,4=话题,5=服务)
    ' result_count: 搜索结果数量(用于统计分析)
    ' clicked_result_id: 点击的结果ID(用户最终选择的结果)
    ' created_at: 搜索时间
    ' 
    ' 业务场景：
    ' - 首页搜索页面历史记录展示(最多10条)
    ' - 搜索建议和自动补全
    ' - 热门搜索词统计
    ' - 用户搜索行为分析
    ' - 搜索结果优化
}

' ===== 聊天模块 (3表) =====

class ChatConversation {
    + id : Long
    + type : Integer
    + title : String
    + creator_id : Long
    + last_message_id : Long
    + unread_count : Integer
    + is_pinned : Boolean
    + is_muted : Boolean
    + metadata : JSON
    + status : Integer
    + created_at : DateTime
    + updated_at : DateTime
    --
    ' 聊天会话表(私聊/群聊/订单会话)
    ' id: 会话唯一ID(雪花ID)
    ' type: 会话类型(1=私聊,2=群聊,3=订单会话)
    ' title: 会话标题(群聊名称,私聊可为空)
    ' creator_id: 创建者ID(群主/发起人)
    ' last_message_id: 最后一条消息ID(快速查询最新消息)
    ' unread_count: 未读消息数(冗余字段,提升性能)
    ' is_pinned: 是否置顶(0=否,1=是)
    ' is_muted: 是否免打扰(0=否,1=是)
    ' metadata: 扩展信息JSON
    ' {description:群聊简介,avatar:群头像,order_id:关联订单ID}
    ' status: 会话状态(0=已解散,1=正常,2=已归档)
    ' created_at: 创建时间
    ' updated_at: 最后活跃时间(新消息时更新,用于会话排序)
    ' 
    ' 业务场景：
    ' - 消息主页面对话列表展示
    ' - 私聊对话页面消息展示
    ' - 订单关联聊天会话
    ' - 会话置顶和免打扰设置
    ' - 未读消息数量统计
    ' - 会话列表排序(置顶优先+时间倒序)
}

class ChatMessage {
    + id : Long
    + conversation_id : Long
    + sender_id : Long
    + message_type : Integer
    + content : String
    + media_id : Long
    + reply_to_id : Long
    + like_count : Integer
    + read_status : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 聊天消息表(文本/图片/语音/视频)
    ' id: 消息唯一ID(雪花ID)
    ' conversation_id: 所属会话ID
    ' sender_id: 发送者ID(NULL=系统消息)
    ' message_type: 消息类型(1=文本,2=图片,3=语音,4=视频,5=文件,6=系统通知)
    ' content: 消息内容(文本消息内容/媒体配文/系统通知文本)
    ' media_id: 媒体文件ID(关联Media表,图片/视频/音频消息时使用)
    ' reply_to_id: 回复的消息ID(引用回复功能)
    ' like_count: 点赞数(图片消息支持点赞互动)
    ' read_status: 已读状态JSON{user_id:已读时间}(群聊时记录所有人已读)
    ' status: 消息状态(0=已删除,1=正常,2=已撤回)
    ' created_at: 发送时间
    ' 
    ' 业务场景：
    ' - 私聊对话页面消息展示
    ' - 文字消息发送和接收
    ' - 图片消息发送和点赞互动
    ' - 语音/视频消息发送
    ' - 消息撤回功能(2分钟内)
    ' - 消息已读回执
    ' - 消息转发和引用回复
}

class ChatParticipant {
    + id : Long
    + conversation_id : Long
    + user_id : Long
    + role : Integer
    + unread_count : Integer
    + last_read_message_id : Long
    + last_read_time : DateTime
    + join_time : DateTime
    + status : Integer
    --
    ' 会话参与者表(会话成员管理)
    ' id: 参与记录ID(雪花ID)
    ' conversation_id: 会话ID
    ' user_id: 参与用户ID
    ' role: 角色权限(1=成员,2=管理员,3=群主)
    ' unread_count: 该用户的未读消息数(个人维度统计)
    ' last_read_message_id: 最后已读消息ID(用于未读计算)
    ' last_read_time: 最后已读时间(时间戳标记)
    ' join_time: 加入时间
    ' status: 参与状态(0=已退出,1=正常,2=已禁言)
    ' 
    ' 业务场景：
    ' - 私聊对话参与者管理
    ' - 群聊成员列表和权限管理
    ' - 未读消息计算和角标显示
    ' - 消息已读状态同步
    ' - 会话成员添加和移除
}

' ==========================================
' 🔗 UML关系定义 - 符合PlantUML标准语法
' ==========================================

' 📌 PlantUML关系符号说明：
' *--  : 组合(Composition) - 实心菱形，强依赖
' o--  : 聚合(Aggregation) - 空心菱形，弱依赖  
' --   : 关联(Association) - 实线，结构化关系
' ..>  : 依赖(Dependency) - 虚线箭头，使用关系
' <|-- : 继承(Inheritance) - 三角箭头，泛化关系
' <|.. : 实现(Realization) - 虚线三角，接口实现

' 📌 多重性表示说明：
' "1"     : 恰好一个
' "0..1"  : 零个或一个  
' "0..*"  : 零个或多个
' "1..*"  : 一个或多个

' ===== 组合关系 (Composition) *-- =====
' 🔸 特征：实心菱形，生命周期绑定
' 🔸 语义：整体-部分，部分不能独立存在
' 🔸 删除策略：CASCADE DELETE

' 用户核心组合关系
User "1" *-- "1" UserProfile : "拥有资料\n生命周期绑定"
User "1" *-- "1" UserWallet : "拥有钱包\n强依赖关系"

' 聊天模块组合关系
ChatConversation "1" *-- "0..*" ChatMessage : "会话消息\n生命周期绑定"
ChatConversation "1" *-- "1..*" ChatParticipant : "会话参与者\n强依赖关系"

' ===== 聚合关系 (Aggregation) o-- =====  
' 🔸 特征：空心菱形，弱依赖关系
' 🔸 语义：整体-部分，部分可独立存在
' 🔸 删除策略：SET NULL 或 RESTRICT

' 用户业务聚合关系
User "1" o-- "0..*" Transaction : "产生交易\n历史记录保留"
User "1" o-- "0..*" Content : "创建内容\n可匿名化保存"
Content "1" o-- "0..*" ContentAction : "内容互动\n行为记录"

' ===== 关联关系 (Association) -- =====
' 🔸 特征：实线连接，结构化关系
' 🔸 语义：类之间的引用关系
' 🔸 删除策略：RESTRICT 或业务逻辑处理

' 用户行为关联
User "1" -- "0..*" ContentAction : "用户操作\n行为追踪"

' 聊天用户关联
User "创建者\ncreator" -- "0..*" ChatConversation : "创建会话\n群主权限"
User "发送者\nsender" -- "0..*" ChatMessage : "发送消息\n内容创建"
User "参与者\nparticipant" -- "0..*" ChatParticipant : "加入会话\n成员身份"

' ===== 自关联关系 (Self Association) =====
' 🔸 特征：一个类与自身建立关系
' 🔸 应用：用户关注、组织层级、消息回复等
' 🔸 实现：同一表中的两个外键字段

' 用户关系自关联
User "发起者\nsource" -- "0..*" UserRelation : "主动建立\n关系发起"
User "目标者\ntarget" -- "0..*" UserRelation : "被动接受\n关系目标"

' 消息回复自关联
ChatMessage "原消息\noriginal" -- "0..*" ChatMessage : "回复消息\n引用关系"

' ===== 多角色关联 (Multi-Role Association) =====
' 🔸 特征：同一个类在关系中扮演不同角色
' 🔸 实现：使用角色名称区分不同的关系端点

' 订单多角色关联
User "买家\nbuyer" -- "0..*" ServiceOrder : "下单购买\n消费者角色"
User "卖家\nseller" -- "0..*" ServiceOrder : "提供服务\n服务者角色"

' ===== 业务关联 (Business Association) =====
' 🔸 特征：表示业务层面的引用关系
' 🔸 目的：连接不同业务领域的实体

' 订单内容关联
Content "技能服务\nskill" -- "0..*" ServiceOrder : "订单内容\n服务标的"

' ===== 话题与内容关联(通过中间表) =====
' 🔸 内容可关联多个话题标签(多对多关系)
' 🔸 使用ContentTopic中间表实现

Content "1" -- "0..*" ContentTopic : "内容话题"
Topic "1" -- "0..*" ContentTopic : "话题内容"

' ===== 用户标签关联 =====
' 🔸 用户拥有多种标签（技能、职业、认证等）

User "1" o-- "0..*" UserTag : "用户标签\n多维标签"

' ===== 媒体文件关联 =====
' 🔸 内容和消息都可以关联媒体文件

User "上传者\nuploader" -- "0..*" Media : "上传文件\n媒体资源"
Content "内容媒体\ncontent" -- "0..*" Media : "关联媒体\n图片视频"
ChatMessage "消息媒体\nmessage" -- "0..*" Media : "附件资源\n多媒体"

' ===== 通知系统关联 =====
' 🔸 用户接收各类通知消息

User "接收者\nreceiver" -- "0..*" Notification : "接收通知\n消息推送"
ContentAction "触发通知\ntrigger" ..> Notification : "互动通知\n点赞评论"
UserRelation "触发通知\ntrigger" ..> Notification : "关注通知\n社交提醒"

' ===== 举报系统关联 =====
' 🔸 支持举报用户、内容、评论等

User "举报人\nreporter" -- "0..*" Report : "提交举报\n安全管理"
Content "被举报\ntarget" -- "0..*" Report : "内容举报\n内容安全"
ContentAction "被举报\ntarget" -- "0..*" Report : "评论举报\n评论管理"

' ===== 搜索历史关联 =====
' 🔸 记录用户搜索行为

User "搜索者\nsearcher" -- "0..*" SearchHistory : "搜索记录\n行为追踪"

' ===== 跨模块业务关联 =====
' 🔸 聊天与订单的业务整合
' 🔸 支持订单相关的聊天会话

ServiceOrder "1" ..> ChatConversation : "订单聊天\n业务集成"

' ==========================================
' 📝 关系说明注释
' ==========================================

note right of UserProfile
  **组合关系说明**
  • 用户删除时资料必须删除
  • Profile无法独立存在
  • 数据库：ON DELETE CASCADE
  • 1对1强绑定关系
end note

note right of Transaction
  **聚合关系说明**
  • 用户删除时交易记录保留
  • 支持数据审计和分析
  • 数据库：ON DELETE SET NULL
  • 历史数据永久保存
end note

note bottom of UserRelation
  **自关联关系说明**
  • user_id -> 关系发起者(主动方)
  • target_id -> 关系目标者(被动方)
  • 查询粉丝: 反向查询target_id字段
  • 查询关注: 正向查询user_id字段
  • 互相关注: 双向关系都存在
  • 业务: 个人主页社交数据/消息粉丝通知/发现页关注Tab
end note

note bottom of ServiceOrder
  **多角色关联说明**
  • buyer_id -> 订单购买者
  • seller_id -> 服务提供者
  • 同一用户可同时是买家和卖家
  • 游戏陪玩/生活服务/组局报名统一订单表
end note

note left of ChatMessage
  **消息自关联说明**
  • reply_to_id -> 被回复的消息ID
  • 支持消息引用和线程显示
  • 被回复消息删除时关系保留
  • 业务场景：评论回复、消息转发
end note

note bottom of Content
  **内容关联订单说明**
  • type=3技能服务可创建订单
  • content_id引用技能服务内容
  • 订单基于具体的技能内容创建
  • 内容下架时订单历史保留
end note

note bottom of ChatConversation
  **订单会话整合说明**
  • 订单创建后自动创建聊天会话
  • 买卖双方在订单会话中沟通
  • 支持订单状态变更通知
  • metadata.order_id关联订单ID
end note

note top of Topic
  **话题系统核心 - 发现页面内容聚合**
  
  **业务功能**
  • 动态发布时话题选择(最多5个话题)
  • 话题详情页面动态聚合展示
  • 热门话题推荐和趋势分析
  • 话题搜索和创建
  • 用户标识系统(性别年龄/人气用户标签)
  
  **统计字段实时更新**
  • participant_count: 参与人数(去重统计)
  • post_count: 动态数量(实时增量)
  • heat_score: 热度指数(算法计算)
  • stats: 详细趋势数据(今日新增/热度曲线/活跃用户)
  
  **热度计算因子**
  发布频率 + 互动数量 + 参与人数 + 时间衰减
end note

note top of Media
  **统一媒体管理 - CDN加速分发**
  
  **支持的媒体类型**
  • 图片: JPEG/PNG/GIF/WebP，最大5MB
  • 视频: MP4/MOV，最大100MB，最长5分钟
  • 音频: MP3/AAC，最大10MB，最长60秒
  
  **处理流程**
  上传 → 格式验证 → 安全扫描 → 压缩优化 → 
  缩略图生成 → CDN分发 → 返回URL
  
  **业务场景**
  • 动态发布: 最多9张图片或1个视频
  • 图片消息: 单次发送，支持点赞互动
  • 头像上传: 裁剪+压缩到500KB
  • 活动封面: 图片轮播展示
end note

note top of Notification
  **通知中心设计 - 消息模块核心**
  
  **4类通知消息**
  1. 赞和收藏: 点赞动态/收藏作品
  2. 评论消息: 评论动态/回复评论
  3. 粉丝消息: 新增关注/取消关注
  4. 系统通知: 资料完善/功能更新/安全提醒
  
  **消息分类展示**
  • 消息主页面: 4个分类入口卡片
  • 各分类子页面: 对应类型消息列表
  • 未读角标: 实时未读数量显示
  • 消息清空: 一键清除确认弹窗
  
  **数据结构**
  data JSON: {sender_info:发送者信息,
             content_preview:内容预览,
             thumbnail_url:缩略图,
             action_url:跳转链接}
end note

note bottom of UserTag
  **多维标签系统 - 用户画像构建**
  
  **4类用户标签**
  1. 技能标签: 王者荣耀/探店/按摩等(个人主页展示)
  2. 职业标签: 模特/学生等(职业编辑页管理,最多5个)
  3. 认证标签: 实名认证/大神认证/商家认证(信誉体系)
  4. 兴趣标签: K歌/台球等(推荐算法使用)
  
  **业务应用**
  • 个人主页技能卡片横向滚动展示
  • 首页用户筛选和精准推荐
  • 组局活动技能要求匹配
  • 服务搜索和分类筛选
  
  **metadata扩展示例**
  技能: {skill_level: 荣耀王者, price: 1500, service_count: 1234}
  职业: {verified: true}
  认证: {cert_type: 1, cert_time: 2025-09-01}
end note

note bottom of Report
  **安全审核机制 - 内容安全管理**
  
  **6类举报理由**
  1. 垃圾信息: 广告、营销信息等
  2. 不当内容: 色情、暴力、血腥等
  3. 侵权内容: 盗用他人作品、肖像等
  4. 虚假信息: 谣言、不实消息等
  5. 骚扰他人: 恶意@用户、言语攻击等
  6. 其他: 其他违规行为
  
  **处理流程**
  提交举报 → AI审核 → 人工复审 → 
  处理措施 → 结果通知 → 24小时内完成
  
  **业务入口**
  • 动态详情页"更多"菜单
  • 话题详情页动态举报
  • 评论举报和管理
  • 用户主页举报功能
end note

note bottom of SearchHistory
  **搜索优化支持 - 智能搜索建议**
  
  **搜索历史功能**
  • 首页搜索页面展示(最多10条)
  • 点击历史快速搜索
  • 长按删除单条历史
  • 一键清空所有历史
  
  **搜索类型支持**
  1=全部: 综合搜索
  2=用户: 用户昵称/ID搜索
  3=动态: 动态内容/话题搜索
  4=话题: 话题名称搜索
  5=服务: 技能服务搜索
  
  **数据应用**
  • 热门搜索词统计
  • 搜索建议优化
  • 用户兴趣分析
  • 搜索结果排序优化
end note

' ==========================================
' 📊 数据库设计总结
' ==========================================

note as DesignSummary
  **探店APP 18表架构总览 v3.0**
  
  **核心用户模块 (4表)**
  User, UserProfile, UserWallet, Transaction
  
  **内容社交模块 (3表)**
  Content, ContentAction, UserRelation
  
  **话题标签模块 (3表)**
  Topic, ContentTopic, UserTag
  
  **交易服务模块 (1表)**
  ServiceOrder
  
  **媒体文件模块 (1表)**
  Media
  
  **通知推送模块 (1表)**
  Notification
  
  **安全审核模块 (1表)**
  Report
  
  **搜索历史模块 (1表)**
  SearchHistory
  
  **聊天模块 (3表)**
  ChatConversation, ChatMessage, ChatParticipant
  
  ====================================================
  
  **业务模块覆盖**
  
  ✅ 登录: 密码/验证码登录、忘记密码重置
  ✅ 首页: 用户推荐、服务网格、限时专享、组局入口
  ✅ 发现: 三Tab动态流、话题系统、评论互动、举报
  ✅ 消息: 4类分类消息、私聊对话、图片点赞、推送
  ✅ 个人: 4Tab主页、资料编辑、技能标签、社交数据
  ✅ 组局: 活动发布、报名支付、参与者管理
  ✅ 服务: 游戏陪玩、生活服务、预订支付
  
  ====================================================
  
  **设计亮点**
  
  ✅ 模块化架构: 8大业务模块清晰分离
  ✅ JSON扩展: metadata/data/stats灵活扩展
  ✅ 多态设计: Content表type支持3种内容类型
  ✅ 性能优化: 统计字段冗余,避免COUNT查询
  ✅ 安全完善: 密码加密、内容审核、举报机制
  
  ====================================================
  
  **核心业务流程**
  
  1. 用户注册登录流程
     密码/验证码登录 -> JWT认证 -> 进入首页
  
  2. 动态发布流程
     选择话题/地点 -> 上传媒体 -> 发布动态 -> 推送关注者
  
  3. 服务预订流程
     浏览服务 -> 选择套餐 -> 填写信息 -> 支付订单 -> 创建会话
  
  4. 组局报名流程
     浏览活动 -> 确认信息 -> 支付费用 -> 加入参与者
  
  5. 消息通知流程
     用户互动 -> 生成通知 -> 推送消息 -> 查看详情
  
  ====================================================
  
  **技术栈建议**
  
  后端: Spring Boot + MyBatis-Plus + Redis + MySQL
  实时: WebSocket + RocketMQ消息队列
  存储: 阿里云OSS + CDN加速
  搜索: ElasticSearch全文搜索
  缓存: Redis多级缓存
  监控: Prometheus + Grafana
end note

@enduml