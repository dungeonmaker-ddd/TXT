---
alwaysApply: false
---

@startuml

' ==========================================
' 🏗️ XY相遇派完整系统 - 综合类图设计 v2.0
' 18张表实现完整功能：用户+内容+交易+聊天+话题+媒体+通知
' 设计理念：计算优于存储，JSON灵活扩展，模块化架构
' 新增：话题、评论、媒体、通知、标签、举报、搜索历史
' ==========================================

' ===== 核心用户模块 (4表) =====

class User {
    + id : Long
    + username : String  
    + mobile : String
    + password : String
    + status : Integer
    + created_at : DateTime
    --
    ' 用户基础信息表
    ' id: 用户唯一标识(雪花ID)
    ' username: 登录用户名(唯一)
    ' mobile: 手机号(唯一,登录凭证)
    ' password: 密码哈希值
    ' status: 用户状态(0=禁用,1=正常,2=冻结)
    ' created_at: 注册时间
}

class UserProfile {
    + user_id : Long
    + nickname : String
    + avatar : String
    + metadata : JSON
    --
    ' 用户资料扩展表
    ' user_id: 关联用户ID
    ' nickname: 用户昵称(显示名,1-20字)
    ' avatar: 头像URL(Media表file_url)
    ' metadata: 扩展信息JSON
    '   {email, real_name, gender, birthday,
    '    height, weight, city, district,
    '    wechat, bio, ip_location, activity_score}
    '
    ' 用户行为示例：
    ' - 编辑昵称：UPDATE nickname='新昵称'
    ' - 上传头像：Media上传→UPDATE avatar=url
    ' - 完善资料：UPDATE metadata JSON字段
    ' - 设置微信：metadata.wechat='sunny0713'
}

class UserWallet {
    + user_id : Long
    + balance : Long
    + version : Integer
    --
    ' 用户钱包表(乐观锁保证并发安全)
    ' user_id: 关联用户ID
    ' balance: 余额(分为单位,避免精度问题)
    '   如：100元存储为10000分
    ' version: 乐观锁版本号(并发控制)
    '
    ' 用户行为示例：
    ' - 充值：balance += 10000, version++
    ' - 支付订单：balance -= 1500, version++
    '   WHERE user_id=xxx AND version=current_version
    ' - 退款：balance += 1500, version++
    ' - 查询余额：SELECT balance/100 AS yuan
}

class Transaction {
    + id : Long
    + user_id : Long
    + amount : Long
    + type : String
    + ref_id : String
    + created_at : DateTime
    --
    ' 统一交易流水表(所有资金变动记录)
    ' id: 交易记录ID
    ' user_id: 用户ID
    ' amount: 交易金额(分,正=收入,负=支出)
    ' type: 交易类型
    '   'recharge'=充值
    '   'consume'=消费
    '   'income'=收入
    '   'refund'=退款
    '   'withdraw'=提现
    ' ref_id: 关联业务ID(订单号/活动ID等)
    ' created_at: 交易时间
    '
    ' 用户行为示例：
    ' - 下单消费：INSERT (amount=-1500, type='consume', ref_id=order_id)
    ' - 提供服务收款：INSERT (amount=+1500, type='income', ref_id=order_id)
    ' - 充值：INSERT (amount=+10000, type='recharge')
    ' - 退款：INSERT (amount=+1500, type='refund', ref_id=order_id)
}

' ===== 内容模块 (3表) =====

class Content {
    + id : Long
    + user_id : Long
    + type : Integer
    + title : String
    + data : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 万能内容表(动态/活动/技能)
    ' id: 内容唯一ID
    ' user_id: 创建者ID
    ' type: 内容类型
    '   1=动态发布(文字/图文/视频动态)
    '   2=活动组局(K歌/台球/探店活动)
    '   3=技能服务(游戏陪玩/生活服务)
    ' title: 内容标题
    ' data: 类型特定数据JSON
    '   动态1: {text, topic_ids[], media_ids[], location, at_users[]}
    '   活动2: {time, location, limit, price, requirements, fee_detail}
    '   技能3: {skill_type, price_list[], rank, service_mode, heroes[]}
    ' status: 内容状态(0=草稿,1=发布,2=下架,3=删除)
    ' created_at: 创建时间
    '
    ' 用户行为示例：
    ' - 发布动态：INSERT (type=1, data={text, topic_ids, media_ids})
    ' - 发布组局：INSERT (type=2, data={time, location, limit, price})
    ' - 添加技能：INSERT (type=3, data={skill_type, price_list})
    ' - 编辑内容：UPDATE data JSON字段
    ' - 下架内容：UPDATE status=2
}

class ContentAction {
    + id : Long
    + content_id : Long
    + user_id : Long
    + action : Integer
    + data : JSON
    + created_at : DateTime
    --
    ' 内容行为统一表(核心互动表)
    ' id: 行为记录ID
    ' content_id: 关联内容ID
    ' user_id: 操作用户ID
    ' action: 行为类型
    '   1=点赞(data=null)
    '   2=评论(data={comment, reply_to})
    '   3=收藏(data=null)
    '   4=分享(data={platform, share_count})
    '   5=评价(data={rating, comment})
    '   6=报名(data={name, phone, gender, remark})
    ' data: 行为扩展数据JSON
    ' created_at: 行为时间
    '
    ' 用户行为示例：
    ' - 点赞动态：INSERT (content_id, user_id, action=1)
    ' - 发表评论：INSERT (action=2, data={comment:'...'})
    ' - 回复评论：INSERT (action=2, data={comment, reply_to:123})
    ' - 活动报名：INSERT (action=6, data={name, phone})
}

class UserRelation {
    + id : Long
    + user_id : Long
    + target_id : Long
    + type : Integer
    + created_at : DateTime
    --
    ' 用户关系表
    ' id: 关系记录ID
    ' user_id: 发起用户ID
    ' target_id: 目标用户ID
    ' type: 关系类型(1=关注,2=拉黑,3=分组)
    ' created_at: 建立关系时间
}

' ===== 交易模块 (1表) =====

class ServiceOrder {
    + id : Long
    + buyer_id : Long
    + seller_id : Long
    + content_id : Long
    + amount : Long
    + duration : Integer
    + status : Integer
    + data : JSON
    + created_at : DateTime
    --
    ' 服务订单表(游戏陪玩+生活服务+活动报名)
    ' id: 订单唯一ID
    ' buyer_id: 买家用户ID
    ' seller_id: 卖家用户ID
    ' content_id: 关联Content(type=2活动/type=3技能)
    ' amount: 订单金额(分)
    ' duration: 服务时长(小时)
    ' status: 订单状态
    '   0=待付款
    '   1=已付款
    '   2=服务中
    '   3=已完成
    '   4=已取消
    '   5=已退款
    ' data: 订单扩展信息JSON
    '   {service_type, appointment_time, 
    '    buyer_note, seller_note, status_history[]}
    ' created_at: 下单时间
    '
    ' 用户行为示例：
    ' - 下单陪玩：INSERT (buyer=me, seller=456, amount=1500)
    ' - 报名活动：INSERT (buyer=me, seller=发起人, amount=6800)
    ' - 支付订单：UserWallet扣款→status=0→1
    ' - 完成服务：status=3→评价ContentAction
    ' - 订单聊天：ChatConversation(type=4, metadata.order_id)
}

' ===== 话题标签模块 (2表) =====

class Topic {
    + id : Long
    + name : String
    + description : String
    + cover_url : String
    + creator_id : Long
    + stats : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 话题标签表(内容聚合核心)
    ' id: 话题唯一ID
    ' name: 话题名称(唯一,如#S10全球总决赛)
    ' description: 话题描述
    ' cover_url: 话题封面图(可选)
    ' creator_id: 创建者ID(首次使用该话题的用户)
    ' stats: 统计数据JSON(每小时更新)
    '   {participant_count: 12000,
    '    post_count: 35000,
    '    heat_score: 98,
    '    trend: 'rising',
    '    top_contributors: [123,456],
    '    last_update: '2025-10-12 10:00'}
    ' status: 话题状态(0=禁用,1=正常,2=热门,3=推荐)
    ' created_at: 创建时间
    '
    ' 用户行为示例：
    ' - 创建话题：发布动态时输入新话题→自动创建
    ' - 使用话题：发布动态→选择话题→data.topic_ids[]
    ' - 查看话题：点击#话题→查询该话题所有动态
    ' - 搜索话题：搜索框→模糊匹配话题名称
    ' - 热门榜单：ORDER BY stats.heat_score DESC
}

class UserTag {
    + id : Long
    + user_id : Long
    + tag_type : Integer
    + tag_value : String
    + metadata : JSON
    + created_at : DateTime
    --
    ' 用户标签表(多维度用户画像)
    ' id: 标签记录ID
    ' user_id: 用户ID
    ' tag_type: 标签类型
    '   1=技能标签(王者荣耀/探店/按摩/台球/K歌)
    '   2=职业标签(模特/学生/自由职业,最多5个)
    '   3=认证标签(实名认证/大神认证/商家认证)
    '   4=兴趣标签(游戏/运动/娱乐偏好)
    ' tag_value: 标签值(具体标签名称)
    ' metadata: 标签扩展信息JSON
    '   技能标签: {level:'荣耀王者', verified:true, score:95}
    '   职业标签: {industry:'娱乐', experience:3}
    '   认证标签: {verify_time:'2025-10-01', cert_no:'***'}
    ' created_at: 创建时间
    '
    ' 用户行为示例：
    ' - 添加技能：INSERT (tag_type=1, tag_value='王者荣耀')
    ' - 添加职业：INSERT (tag_type=2, tag_value='模特')
    ' - 删除职业：DELETE WHERE tag_type=2 AND tag_value='xxx'
    ' - 获得认证：INSERT (tag_type=3, tag_value='实名认证')
    ' - 技能筛选：WHERE tag_type=1 AND tag_value='王者荣耀'
}

' ===== 媒体文件模块 (1表) =====

class Media {
    + id : Long
    + uploader_id : Long
    + file_type : Integer
    + file_url : String
    + thumbnail_url : String
    + metadata : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 媒体文件表(统一管理+CDN加速)
    ' id: 文件唯一ID
    ' uploader_id: 上传者ID
    ' file_type: 文件类型
    '   1=图片(JPG/PNG/GIF/WebP,最大5MB)
    '   2=视频(MP4/MOV,最大100MB,5分钟)
    '   3=音频(MP3/AAC,最大10MB,60秒)
    ' file_url: CDN文件访问URL
    ' thumbnail_url: 缩略图URL(自动生成)
    ' metadata: 文件扩展信息JSON
    '   图片: {size:524288, width:1920, height:1080, format:'jpg'}
    '   视频: {size:10485760, duration:120, format:'mp4'}
    '   音频: {size:1048576, duration:60, waveform:[...]}
    ' status: 文件状态(0=已删除,1=正常,2=审核中,3=违规)
    ' created_at: 上传时间
    '
    ' 用户行为示例：
    ' - 上传头像：拍照→裁剪→压缩→INSERT→UserProfile.avatar
    ' - 发布动态：选9张图→批量INSERT→Content.data.media_ids[]
    ' - 发送图片：聊天上传→INSERT→ChatMessage.media_data.media_id
    ' - 语音试听：录音→INSERT→Content.data.voice_sample_id
    ' - 查看大图：SELECT file_url→CDN加速下载
}

' ===== 通知推送模块 (1表) =====

class Notification {
    + id : Long
    + user_id : Long
    + type : Integer
    + title : String
    + content : String
    + data : JSON
    + is_read : Boolean
    + created_at : DateTime
    --
    ' 通知消息表(消息页4个功能卡片)
    ' id: 通知唯一ID
    ' user_id: 接收用户ID(通知对象)
    ' type: 通知类型
    '   1=点赞通知→"赞和收藏"卡片
    '   2=评论通知→"评论"卡片
    '   3=关注通知→"粉丝"卡片
    '   4=系统通知→"系统通知"卡片
    ' title: 通知标题(如"完善个人资料")
    ' content: 通知内容(如"用户123点赞了你的动态")
    ' data: 扩展数据JSON
    '   {sender_id:456, sender_name:'用户123',
    '    content_id:789, content_preview:'请你们看雪',
    '    action_type:'like', thumbnail:'https://...'}
    ' is_read: 是否已读(0=未读显示角标,1=已读)
    ' created_at: 通知时间
    '
    ' 用户行为示例：
    ' - 点赞触发：ContentAction点赞→INSERT Notification(type=1)
    ' - 评论触发：ContentAction评论→INSERT Notification(type=2)
    ' - 关注触发：UserRelation关注→INSERT Notification(type=3)
    ' - 查看通知：消息页→点击卡片→查询对应type
    ' - 标记已读：查看通知→UPDATE is_read=1
    ' - 清空通知：一键清除→DELETE WHERE type=x
}

' ===== 安全审核模块 (1表) =====

class Report {
    + id : Long
    + reporter_id : Long
    + target_id : Long
    + target_type : Integer
    + reason : Integer
    + description : String
    + evidence : JSON
    + status : Integer
    + created_at : DateTime
    --
    ' 举报记录表(24小时处理承诺)
    ' id: 举报记录ID
    ' reporter_id: 举报人ID(严格保密)
    ' target_id: 被举报目标ID
    ' target_type: 目标类型
    '   1=举报用户(User)
    '   2=举报内容(Content)
    '   3=举报评论(ContentAction)
    ' reason: 举报原因(6大类)
    '   1=垃圾信息(广告/营销)
    '   2=不当内容(色情/暴力)
    '   3=侵权内容(盗用作品)
    '   4=虚假信息(谣言)
    '   5=骚扰他人(恶意@)
    '   6=其他(其他违规)
    ' description: 详细说明(最多500字)
    ' evidence: 证据材料JSON
    '   {screenshots:['url1','url2'], 
    '    description:'详细说明', category:'色情'}
    ' status: 处理状态
    '   0=待处理 1=处理中 2=已处理 3=已驳回
    ' created_at: 举报时间
    '
    ' 用户行为示例：
    ' - 举报动态：更多菜单→举报→选理由→填说明→提交
    ' - 举报用户：用户详情→举报→上传截图→提交
    ' - 查看进度：我的举报→查询status状态
    ' - 管理员处理：审核→更新status→通知结果
}

' ===== 搜索历史模块 (1表) =====

class SearchHistory {
    + id : Long
    + user_id : Long
    + keyword : String
    + search_type : Integer
    + result_count : Integer
    + created_at : DateTime
    --
    ' 搜索历史表(最多10条,智能推荐)
    ' id: 搜索记录ID
    ' user_id: 搜索用户ID
    ' keyword: 搜索关键词(如"王者荣耀")
    ' search_type: 搜索类型
    '   1=用户搜索(搜索昵称/ID)
    '   2=内容搜索(搜索动态)
    '   3=话题搜索(搜索#话题)
    ' result_count: 搜索结果数量(用于优化)
    ' created_at: 搜索时间
    '
    ' 用户行为示例：
    ' - 搜索用户：输入关键词→搜索→INSERT记录
    ' - 显示历史：搜索页→显示最近10条→ORDER BY created_at DESC
    ' - 点击历史：点击历史标签→快速搜索
    ' - 删除历史：长按→删除单条/一键清空全部
    ' - 热门搜索：GROUP BY keyword→COUNT→热词统计
    ' - 自动清理：超过10条→DELETE最早记录
}

' ===== 聊天模块 (3表) =====

class ChatConversation {
    + id : Long
    + type : Integer
    + title : String
    + creator_id : Long
    + metadata : JSON
    + status : Integer
    + created_at : DateTime
    + updated_at : DateTime
    --
    ' 聊天会话表(私聊/群聊/订单/活动)
    ' id: 会话唯一ID(雪花ID)
    ' type: 会话类型
    '   1=私聊会话(一对一聊天)
    '   2=群聊会话(活动群/普通群)
    '   3=系统通知(系统消息)
    '   4=订单会话(买卖双方专属)
    ' title: 会话标题
    '   私聊为空,群聊如"K歌活动群"
    ' creator_id: 创建者ID(群主/发起人)
    ' metadata: 扩展信息JSON
    '   私聊: {muted:false, pinned:true}
    '   群聊: {member_limit:6, activity_id:123}
    '   订单: {order_id:456, service_type:'game'}
    ' status: 会话状态(0=已解散,1=正常,2=已归档)
    ' created_at: 创建时间
    ' updated_at: 最后活跃时间(最新消息时间)
    '
    ' 用户行为示例：
    ' - 发起私聊：点击私信→创建会话(type=1)
    ' - 活动群聊：报名成功→自动创建(type=2)
    ' - 订单会话：下单成功→自动创建(type=4)
    ' - 置顶对话：metadata.pinned=true
    ' - 免打扰：metadata.muted=true
}

class ChatMessage {
    + id : Long
    + conversation_id : Long
    + sender_id : Long
    + message_type : Integer
    + content : String
    + media_data : JSON
    + reply_to_id : Long
    + status : Integer
    + created_at : DateTime
    --
    ' 聊天消息表(支持多媒体+引用+点赞)
    ' id: 消息唯一ID
    ' conversation_id: 所属会话ID
    ' sender_id: 发送者ID(NULL=系统消息)
    ' message_type: 消息类型
    '   1=文本消息
    '   2=图片消息(支持点赞功能)
    '   3=语音消息(60秒限制)
    '   4=视频消息(5分钟限制)
    '   5=文件消息
    '   6=系统通知
    ' content: 消息内容(文本/配文/系统通知文本)
    ' media_data: 媒体数据JSON
    '   图片: {media_id:789, caption:'请你们看雪',
    '         like_count:88, like_users:[111,222]}
    '   语音: {media_id:790, duration:30, waveform:[...]}
    '   视频: {media_id:791, duration:120, thumbnail:'...'}
    ' reply_to_id: 回复的消息ID(引用回复)
    ' status: 消息状态(0=已删除,1=正常,2=已撤回)
    ' created_at: 发送时间
    '
    ' 用户行为示例：
    ' - 发文字：INSERT (type=1, content='你好')
    ' - 发图片：Media上传→INSERT (type=2, media_data={media_id})
    ' - 点赞图片：UPDATE media_data.like_count++, like_users.push(user_id)
    ' - 发语音：录音60s→Media上传→INSERT (type=3)
    ' - 回复消息：长按→回复→INSERT (reply_to_id=123)
    ' - 撤回消息：2分钟内→UPDATE status=2
}

class ChatParticipant {
    + id : Long
    + conversation_id : Long
    + user_id : Long
    + role : Integer
    + join_time : DateTime
    + last_read_time : DateTime
    + status : Integer
    --
    ' 会话参与者表(成员管理+未读计算)
    ' id: 参与记录ID
    ' conversation_id: 会话ID
    ' user_id: 参与用户ID
    ' role: 角色权限
    '   1=普通成员
    '   2=管理员(可踢人)
    '   3=群主(可解散群)
    ' join_time: 加入时间
    ' last_read_time: 最后已读时间
    '   用于计算未读：COUNT消息WHERE created_at>last_read_time
    ' status: 参与状态(0=已退出,1=正常,2=已禁言)
    '
    ' 用户行为示例：
    ' - 加入会话：INSERT (conversation_id, user_id, role=1)
    ' - 阅读消息：UPDATE last_read_time=NOW()
    ' - 计算未读：COUNT消息WHERE created_at>last_read_time
    ' - 退出群聊：UPDATE status=0
    ' - 群主踢人：UPDATE status=0 WHERE user_id=xxx
}

' ==========================================
' 🔗 UML关系定义 - 符合PlantUML标准语法
' ==========================================

' 📌 PlantUML关系符号说明：
' *--  : 组合(Composition) - 实心菱形，强依赖
' o--  : 聚合(Aggregation) - 空心菱形，弱依赖  
' --   : 关联(Association) - 实线，结构化关系
' ..>  : 依赖(Dependency) - 虚线箭头，使用关系
' <|-- : 继承(Inheritance) - 三角箭头，泛化关系
' <|.. : 实现(Realization) - 虚线三角，接口实现

' 📌 多重性表示说明：
' "1"     : 恰好一个
' "0..1"  : 零个或一个  
' "0..*"  : 零个或多个
' "1..*"  : 一个或多个

' ===== 组合关系 (Composition) *-- =====
' 🔸 特征：实心菱形，生命周期绑定
' 🔸 语义：整体-部分，部分不能独立存在
' 🔸 删除策略：CASCADE DELETE

' 用户核心组合关系
User "1" *-- "1" UserProfile : "拥有资料\n生命周期绑定"
User "1" *-- "1" UserWallet : "拥有钱包\n强依赖关系"

' 聊天模块组合关系
ChatConversation "1" *-- "0..*" ChatMessage : "会话消息\n生命周期绑定"
ChatConversation "1" *-- "1..*" ChatParticipant : "会话参与者\n强依赖关系"

' ===== 聚合关系 (Aggregation) o-- =====  
' 🔸 特征：空心菱形，弱依赖关系
' 🔸 语义：整体-部分，部分可独立存在
' 🔸 删除策略：SET NULL 或 RESTRICT

' 用户业务聚合关系
User "1" o-- "0..*" Transaction : "产生交易\n历史记录保留"
User "1" o-- "0..*" Content : "创建内容\n可匿名化保存"
Content "1" o-- "0..*" ContentAction : "内容互动\n行为记录"

' ===== 关联关系 (Association) -- =====
' 🔸 特征：实线连接，结构化关系
' 🔸 语义：类之间的引用关系
' 🔸 删除策略：RESTRICT 或业务逻辑处理

' 用户行为关联
User "1" -- "0..*" ContentAction : "用户操作\n行为追踪"

' 聊天用户关联
User "创建者\ncreator" -- "0..*" ChatConversation : "创建会话\n群主权限"
User "发送者\nsender" -- "0..*" ChatMessage : "发送消息\n内容创建"
User "参与者\nparticipant" -- "0..*" ChatParticipant : "加入会话\n成员身份"

' ===== 自关联关系 (Self Association) =====
' 🔸 特征：一个类与自身建立关系
' 🔸 应用：用户关注、组织层级、消息回复等
' 🔸 实现：同一表中的两个外键字段

' 用户关系自关联
User "发起者\nsource" -- "0..*" UserRelation : "主动建立\n关系发起"
User "目标者\ntarget" -- "0..*" UserRelation : "被动接受\n关系目标"

' 消息回复自关联
ChatMessage "原消息\noriginal" -- "0..*" ChatMessage : "回复消息\n引用关系"

' ===== 多角色关联 (Multi-Role Association) =====
' 🔸 特征：同一个类在关系中扮演不同角色
' 🔸 实现：使用角色名称区分不同的关系端点

' 订单多角色关联
User "买家\nbuyer" -- "0..*" ServiceOrder : "下单购买\n消费者角色"
User "卖家\nseller" -- "0..*" ServiceOrder : "提供服务\n服务者角色"

' ===== 业务关联 (Business Association) =====
' 🔸 特征：表示业务层面的引用关系
' 🔸 目的：连接不同业务领域的实体

' 订单内容关联
Content "技能服务\nskill" -- "0..*" ServiceOrder : "订单内容\n服务标的"

' ===== 话题与内容关联 =====
' 🔸 内容可关联多个话题标签

Content "创建者\nauthor" -- "0..*" Topic : "使用话题\n话题标签"
Topic "1" o-- "0..*" Content : "话题动态\n内容聚合"

' ===== 用户标签关联 =====
' 🔸 用户拥有多种标签（技能、职业、认证等）

User "1" o-- "0..*" UserTag : "用户标签\n多维标签"

' ===== 媒体文件关联 =====
' 🔸 内容和消息都可以关联媒体文件

User "上传者\nuploader" -- "0..*" Media : "上传文件\n媒体资源"
Content "内容媒体\ncontent" -- "0..*" Media : "关联媒体\n图片视频"
ChatMessage "消息媒体\nmessage" -- "0..*" Media : "附件资源\n多媒体"

' ===== 通知系统关联 =====
' 🔸 用户接收各类通知消息

User "接收者\nreceiver" -- "0..*" Notification : "接收通知\n消息推送"
ContentAction "触发通知\ntrigger" ..> Notification : "互动通知\n点赞评论"
UserRelation "触发通知\ntrigger" ..> Notification : "关注通知\n社交提醒"

' ===== 举报系统关联 =====
' 🔸 支持举报用户、内容、评论等

User "举报人\nreporter" -- "0..*" Report : "提交举报\n安全管理"
Content "被举报\ntarget" -- "0..*" Report : "内容举报\n内容安全"
ContentAction "被举报\ntarget" -- "0..*" Report : "评论举报\n评论管理"

' ===== 搜索历史关联 =====
' 🔸 记录用户搜索行为

User "搜索者\nsearcher" -- "0..*" SearchHistory : "搜索记录\n行为追踪"

' ===== 跨模块业务关联 =====
' 🔸 聊天与订单的业务整合
' 🔸 支持订单相关的聊天会话

ServiceOrder "1" ..> ChatConversation : "订单聊天\n业务集成"

' ==========================================
' 📝 关系说明注释
' ==========================================

note right of User::UserProfile
  组合关系说明：
  • 用户删除时资料必须删除
  • Profile无法独立存在
  • 数据库：ON DELETE CASCADE
end note

note right of User::Transaction
  聚合关系说明：
  • 用户删除时交易记录保留
  • 支持数据审计和分析
  • 数据库：ON DELETE SET NULL
end note

note bottom of UserRelation
  **自关联关系说明 + 用户行为**
  
  • user_id -> 关系发起者
  • target_id -> 关系目标者
  
  **用户行为场景**
  📱 关注用户：用户详情页→点击关注按钮→type=1
     → 我的关注列表：WHERE user_id=me
     → 我的粉丝列表：WHERE target_id=me
  📱 取消关注：已关注状态→点击取消→删除记录
  📱 拉黑用户：用户详情→拉黑→type=2→屏蔽所有内容
  📱 关注列表：个人主页→关注数→查看关注列表
  📱 粉丝管理：个人主页→粉丝数→关注粉丝(互关)
  
  **互相关注判断**
  SELECT COUNT(*)=2 FROM UserRelation
  WHERE (user_id=A AND target_id=B AND type=1)
  OR (user_id=B AND target_id=A AND type=1)
end note

note bottom of ServiceOrder
  **多角色关联说明 + 用户行为**
  
  • buyer_id -> 订单购买者
  • seller_id -> 服务提供者
  • 同一用户可同时是买家和卖家
  
  **用户行为场景**
  📱 购买服务：浏览陪玩师→下单→支付→buyer角色
  📱 提供服务：发布技能→接单→服务→seller角色
  📱 活动报名：组局中心→报名活动→支付→buyer角色
  📱 发起活动：发布组局→收款→组织→seller角色
  📱 订单管理：我的订单→查看买入/卖出订单
  📱 订单聊天：订单详情→联系对方→专属会话
  
  **角色统计查询**
  我买的：WHERE buyer_id=me
  我卖的：WHERE seller_id=me
  收入统计：SUM(amount) WHERE seller_id=me
end note

note bottom of ChatMessage
  **消息自关联说明 + 用户行为**
  
  • reply_to_id -> 被回复的消息ID
  • 支持消息引用和线程显示
  
  **用户行为场景**
  📱 回复消息：长按消息→点击回复→引用原消息
     → reply_to_id指向被回复的消息
  📱 查看引用：显示被回复消息内容预览
  📱 跳转定位：点击引用→跳转到原消息位置
  📱 删除处理：原消息删除→引用仍显示"消息已删除"
  
  **图片消息点赞(media_data JSON)**
  📱 点赞图片：点击❤️→media_data.like_count++
  📱 查看点赞：显示点赞数和点赞用户列表
  📱 取消点赞：再次点击→like_count--
end note

note right of Content::ServiceOrder
  业务关联说明：
  • content_id 引用技能服务内容
  • 订单基于具体的技能内容创建
  • 支持技能服务的销售统计
  • 内容下架时订单历史保留
end note

note right of ServiceOrder::ChatConversation
  跨模块业务整合：
  • 订单创建后可自动创建聊天会话
  • 买卖双方在订单会话中沟通
  • 支持订单状态变更通知
  • 提升用户交易体验
end note

note top of Topic
  **话题系统核心 + 用户行为**
  
  • 动态内容按话题聚合
  • 支持话题趋势分析
  
  **用户行为场景**
  📱 发布动态：选择话题#S10全球总决赛
  📱 浏览话题：点击话题→查看相关动态聚合
  📱 创建话题：发布时创建新话题标签
  📱 热门排行：查看热门话题榜单
  📱 话题搜索：搜索框搜索话题关键词
  
  **stats JSON实时统计**
  {
    participant_count: 12000,  ← 参与人数
    post_count: 35000,         ← 动态数量
    heat_score: 98,            ← 热度指数
    trend: "rising",           ← 趋势分析
    last_update: "10-12 10:00" ← 每小时更新
  }
end note

note top of Media
  **统一媒体管理 + 用户行为**
  
  • 所有图片/视频/音频统一管理
  • CDN加速分发+自动缩略图
  
  **用户行为场景**
  📱 上传头像：拍照/相册→裁剪→压缩→上传CDN
  📱 发布动态：选择9张图片→上传→关联到Content
  📱 发送图片：聊天发图→上传→关联到ChatMessage
  📱 语音试听：录制语音样本→上传→技能展示
  📱 查看大图：点击图片→全屏查看→手势缩放
  
  **metadata存储示例**
  {
    size: 524288,      ← 文件大小(字节)
    width: 1920,       ← 图片宽度
    height: 1080,      ← 图片高度  
    duration: 120,     ← 视频时长(秒)
    format: "jpg"      ← 文件格式
  }
end note

note top of Notification
  **通知中心设计 + 用户行为**
  
  type分类通知类型：
  1=点赞通知
  2=评论通知  
  3=关注通知
  4=系统通知
  
  **用户行为场景**
  📱 查看通知：消息页4个功能卡片分类展示
  📱 点击通知：跳转到原内容/用户详情页
  📱 标记已读：查看后自动标记is_read=1
  📱 清空通知：一键清除确认→批量删除
  📱 处理通知：系统通知的"立即完善"按钮
  
  **data JSON扩展 - 丰富通知信息**
  {
    sender_id: 456,
    sender_name: "用户名称123",
    sender_avatar: "https://...",
    content_id: 789,
    content_preview: "请你们看雪",
    action_type: "like",
    thumbnail: "https://..."
  }
end note

note bottom of UserTag
  **多维标签系统 + 用户行为**
  
  tag_type标签类型：
  1=技能标签(王者荣耀/探店/按摩)
  2=职业标签(模特/学生/自由职业)
  3=认证标签(实名认证/大神认证)
  4=兴趣标签(K歌/台球/健身)
  
  **用户行为场景**
  📱 添加技能：个人主页→添加技能→选择游戏/服务
  📱 管理职业：编辑资料→职业标签→添加/删除(最多5个)
  📱 获得认证：实名认证→上传身份证→审核通过
  📱 标签筛选：首页筛选→按技能标签筛选用户
  📱 个性推荐：基于标签的智能匹配算法
  
  **metadata扩展 - 标签额外信息**
  技能: {level:'荣耀王者', verified:true, score:95}
  职业: {industry:'娱乐', experience:3}
  认证: {verify_time:'2025-10-01', cert_no:'***'}
end note

note bottom of Report
  **安全审核机制 + 用户行为**
  
  • 支持多目标举报
  • 6类举报理由
  • 24小时处理承诺
  
  **用户行为场景**
  📱 举报动态：点击更多→选择举报→选理由→填说明
     → 垃圾信息/不当内容/侵权/虚假/骚扰/其他
  📱 举报用户：用户详情页→举报→提交证据
  📱 举报评论：评论详情→举报不当评论
  📱 查看进度：我的举报→查看处理状态
  📱 审核处理：管理员审核→status更新→通知结果
  
  **evidence JSON存储证据**
  {
    screenshots: ['url1', 'url2'],  ← 截图证据
    description: "详细说明",
    category: "色情内容"
  }
end note

note bottom of SearchHistory
  **搜索优化支持 + 用户行为**
  
  • 记录搜索行为
  • 支持搜索历史展示
  • 热门搜索统计
  
  **用户行为场景**
  📱 搜索用户：输入关键词→搜索→记录历史
  📱 搜索话题：搜索#话题→显示相关话题
  📱 历史记录：显示最近10条搜索→点击快速搜索
  📱 热门搜索：展示平台热搜词→点击搜索
  📱 清空历史：长按删除单条/一键清空全部
  
  **search_type分类**
  1=用户搜索 → 搜索昵称/ID
  2=内容搜索 → 搜索动态内容
  3=话题搜索 → 搜索话题标签
  
  最多保留10条，超出自动删除最早记录
end note

' ===== 扩展信息注释 =====

note top of User
  **系统核心实体 + 用户行为**
  
  • 所有业务模块的基础
  • 支持多角色身份切换
  • 统一的用户状态管理
  
  **用户行为场景**
  📱 登录注册：输入手机号+密码/验证码
  📱 切换角色：既是买家又是卖家
  📱 发布内容：创建动态/活动/技能服务
  📱 社交互动：关注/被关注/聊天/评论
  📱 服务交易：购买服务/提供服务
end note

note top of Content
  **万能内容设计 + 用户行为**
  type=1: 动态发布
  type=2: 活动管理  
  type=3: 技能服务
  
  **用户行为场景**
  📱 发布动态：写文字+选图片+加话题+标地点
     → data={text, topic_ids[], media_ids[], location}
  
  📱 发布组局：选类型+设时间+定地点+设人数+定价格
     → data={time, location, limit, price, requirements}
  
  📱 添加技能：选技能+定价+设段位+上传作品
     → data={skill_type, price_list[], rank, heroes[]}
  
  📱 浏览内容：下拉刷新+筛选+点赞+评论+分享
  📱 话题聚合：点击话题→查询该话题所有动态
  
  **data JSON灵活扩展 - 避免创建多个专用表**
  动态type=1: {text, topic_ids[], location, media_ids[], at_users[]}
  活动type=2: {time, location, limit, price, requirements, tags[]}
  技能type=3: {skill_type, price_list[], rank, service_mode, heroes[]}
end note

note top of ChatConversation
  **会话类型统一 + 用户行为**
  type=1: 私聊会话
  type=2: 群聊会话
  type=3: 系统通知
  type=4: 订单会话(扩展)
  
  **用户行为场景**
  📱 发起私聊：点击私信按钮→创建会话→发送消息
  📱 活动群聊：活动报名成功→自动创建群聊→群内沟通
  📱 订单会话：下单成功→创建订单会话→买卖双方沟通
  📱 消息管理：置顶对话/免打扰/删除会话
  📱 图片互动：发图片+写配文→对方点赞图片
  
  **metadata扩展示例**
  私聊: {muted:false, pinned:true, last_read_time}
  群聊: {member_limit:6, join_mode:'invite', chat_rules}
  订单会话: {order_id:123, service_type:'game', seller_id:456}
  活动群: {activity_id:789, current_members:3, max_members:6}
end note

' ==========================================
' 📊 数据库设计总结
' ==========================================

note as DesignSummary
  **XY相遇派 18表架构总览**
  
  **核心用户模块 (4表)**
  User, UserProfile, UserWallet, Transaction
  
  **内容社交模块 (3表)**
  Content, ContentAction, UserRelation
  
  **话题标签模块 (2表)**
  Topic, UserTag
  
  **交易服务模块 (1表)**
  ServiceOrder
  
  **媒体文件模块 (1表)**
  Media
  
  **通知推送模块 (1表)**
  Notification
  
  **安全审核模块 (1表)**
  Report
  
  **搜索历史模块 (1表)**
  SearchHistory
  
  **聊天模块 (3表)**
  ChatConversation, ChatMessage, ChatParticipant
  
  **设计亮点**
  ✅ 模块化架构：7大业务模块清晰分离
  ✅ JSON扩展：metadata/data/stats字段灵活扩展
  ✅ 多态设计：Content表type字段支持多种内容类型
  ✅ 关系明确：组合/聚合/关联关系规范使用
  ✅ 性能优化：计算优于存储，避免数据冗余
  ✅ 安全完善：举报审核、内容管理、权限控制
  
  **支持功能**
  ✅ 首页：服务展示、智能推荐、地理位置筛选
  ✅ 发现：动态流、话题聚合、评论系统、举报管理
  ✅ 消息：私聊群聊、分类通知、实时推送、多端同步
  ✅ 个人：资料展示、编辑管理、技能服务、社交数据
  ✅ 交易：服务订单、支付流程、订单聊天、评价系统
end note

' ==========================================
' 🎯 用户行为场景映射
' ==========================================

note as UserScenarios
  **典型用户行为 → 数据表映射**
  
  **场景1: 用户注册登录**
  📱 用户操作：输入手机号+验证码登录
  💾 数据操作：
    → User表：创建用户记录(mobile/password/status)
    → UserProfile表：创建用户资料(nickname/avatar)
    → UserWallet表：初始化钱包(balance=0)
  
  **场景2: 完善个人资料**
  📱 用户操作：编辑昵称/头像/性别/生日/身高等
  💾 数据操作：
    → Media表：上传头像文件(file_type=1)
    → UserProfile表：更新metadata JSON
       {gender, birthday, height, weight, city, wechat}
    → UserTag表：添加职业标签(tag_type=2, tag_value='模特')
    → UserTag表：添加认证(tag_type=3, tag_value='实名认证')
  
  **场景3: 发现页发布动态**
  📱 用户操作：写文字+上传图片+选话题+标记地点
  💾 数据操作：
    → Media表：上传9张图片(file_type=1)
    → Content表：创建动态(type=1)
       data = {text, topic_ids:[123], media_ids:[456,789], 
               location:'深圳市南山区'}
    → Topic表：更新话题统计stats.post_count++
    → Notification表：通知关注者(type=系统推送)
  
  **场景4: 话题详情页浏览**
  📱 用户操作：点击#S10全球总决赛话题标签
  💾 数据操作：
    → Topic表：查询话题信息和stats统计
    → Content表：WHERE JSON_CONTAINS(data, 'topic_id')
       聚合该话题下所有动态
    → UserTag表：查询用户标识(性别年龄/人气标签)
    → Media表：JOIN加载动态图片视频
  
  **场景5: 动态评论互动**
  📱 用户操作：点赞动态+发评论+回复评论
  💾 数据操作：
    → ContentAction表：记录点赞(action=1, data=null)
    → ContentAction表：记录评论(action=2, 
       data={'comment':'评论内容', 'reply_to':null})
    → ContentAction表：记录回复(action=2,
       data={'comment':'回复内容', 'reply_to':parent_id})
    → Notification表：通知作者(type=1点赞/type=2评论)
       data = {sender_id, content_id, action_type}
  
  **场景6: 举报不当内容**
  📱 用户操作：举报动态+选择理由+填写说明
  💾 数据操作：
    → Report表：创建举报记录
       (reporter_id, target_id, target_type=2内容,
        reason=2不当内容, description='具体说明',
        evidence={'screenshots':['url1','url2']})
    → Notification表：通知管理员审核
    → Content表：审核后可能更新status=2下架
  
  **场景7: 消息页查看通知**
  📱 用户操作：点击"赞和收藏"卡片查看通知
  💾 数据操作：
    → Notification表：查询(user_id=xxx, type=1点赞)
       ORDER BY created_at DESC
    → User+UserProfile表：JOIN获取点赞用户信息
    → Content表：JOIN获取被点赞内容预览
    → Notification表：更新is_read=1已读状态
  
  **场景8: 私聊发图片消息**
  📱 用户操作：选图片+写配文+发送+对方点赞图片
  💾 数据操作：
    → Media表：上传图片(file_type=1, uploader_id)
    → ChatMessage表：发送消息(message_type=2,
       content='请你们看雪',
       media_data={'media_id':123, 'like_count':0, 'like_users':[]})
    → ChatMessage表：点赞更新JSON
       media_data.like_count++, like_users.push(user_id)
    → ChatParticipant表：更新对方未读计数
  
  **场景9: 王者荣耀陪玩下单**
  📱 用户操作：搜索陪玩师+查看详情+下单+支付+聊天
  💾 数据操作：
    → SearchHistory表：记录搜索(keyword='王者荣耀', type=1)
    → UserTag表：筛选技能(tag_type=1, tag_value='王者荣耀')
    → Content表：查询技能服务(type=3, data.skill_type='王者')
    → ServiceOrder表：创建订单(buyer_id, seller_id, amount)
    → UserWallet表：扣款(balance -= amount, version++)
    → Transaction表：记录流水(amount=-1500, type='consume')
    → ChatConversation表：创建订单会话(type=4,
       metadata={'order_id':xxx})
    → ChatParticipant表：添加买卖双方为成员
  
  **场景10: 组局中心发布活动**
  📱 用户操作：发布K歌活动+设置时间地点+收费标准
  💾 数据操作：
    → Media表：上传活动封面图
    → Content表：创建活动(type=2,
       data={time:'2025-10-15 19:00', location:'景田在线网咖',
             limit:6, price:6800, requirements:{gender:'mixed'}})
    → ContentAction表：其他用户报名(action=6,
       data={name:'张三', phone:'138***', gender:'male'})
    → ServiceOrder表：报名成功创建订单
    → ChatConversation表：创建活动群聊(type=2)
  
  **场景11: 个人主页Tab切换**
  📱 用户操作：查看动态/收藏/点赞/资料4个Tab
  💾 数据操作：
    → Tab动态：Content WHERE user_id=xxx AND type=1
    → Tab收藏：ContentAction WHERE user_id=xxx AND action=收藏
       JOIN Content获取收藏内容
    → Tab点赞：ContentAction WHERE user_id=xxx AND action=1
       JOIN Content获取点赞内容  
    → Tab资料：UserProfile + UserTag(技能/职业标签)
    → 社交数据：UserRelation COUNT计算关注数/粉丝数
  
  **场景12: 技能服务管理**
  📱 用户操作：添加技能+定价+设置段位+上线服务
  💾 数据操作：
    → UserTag表：添加技能标签(tag_type=1,
       tag_value='王者荣耀',
       metadata={'level':'荣耀王者', 'verified':true})
    → Content表：创建技能服务(type=3,
       data={skill_type:'王者荣耀', price:1500,
             rank:'荣耀王者', service_mode:'online'})
    → Media表：上传段位截图/个人相册
end note

' ==========================================
' 📊 核心业务流程说明
' ==========================================

note as BusinessFlows
  **关键业务流程数据流转**
  
  **流程A: 发现页完整互动链路**
  用户浏览动态 → 点赞评论 → 关注作者 → 私信沟通
  ┌─────────────────────────────────────────┐
  │ 1. Content表：加载动态列表(type=1)        │
  │    ├─ JOIN User+UserProfile：作者信息     │
  │    ├─ JOIN Topic：话题标签                │
  │    └─ JOIN Media：图片视频                │
  │                                          │
  │ 2. ContentAction表：用户点赞(action=1)   │
  │    └─ Notification表：通知作者            │
  │                                          │
  │ 3. ContentAction表：用户评论(action=2)   │
  │    ├─ data={'comment':'...', 'reply_to':null}│
  │    └─ Notification表：通知作者(type=2)   │
  │                                          │
  │ 4. UserRelation表：关注作者(type=1)      │
  │    └─ Notification表：通知被关注者(type=3)│
  │                                          │
  │ 5. ChatConversation表：创建私聊会话      │
  │    ├─ ChatParticipant表：添加双方成员     │
  │    └─ ChatMessage表：发送消息             │
  └─────────────────────────────────────────┘
  
  **流程B: 服务交易完整链路**
  浏览陪玩师 → 查看详情 → 下单支付 → 订单聊天 → 服务评价
  ┌─────────────────────────────────────────┐
  │ 1. UserTag表：筛选技能标签               │
  │    WHERE tag_type=1 AND tag_value='王者'  │
  │                                          │
  │ 2. Content表：查询技能服务(type=3)       │
  │    data={price:1500, rank:'荣耀王者'}    │
  │                                          │
  │ 3. ServiceOrder表：创建订单              │
  │    (buyer_id, seller_id, content_id,    │
  │     amount=1500, duration=2)            │
  │                                          │
  │ 4. UserWallet表：买家扣款               │
  │    balance -= 1500 (乐观锁version++)     │
  │                                          │
  │ 5. Transaction表：记录交易流水           │
  │    (amount=-1500, type='consume',       │
  │     ref_id=order_id)                    │
  │                                          │
  │ 6. ChatConversation表：订单会话(type=4)  │
  │    metadata={'order_id':xxx}            │
  │                                          │
  │ 7. ContentAction表：服务后评价(action=5) │
  │    data={'rating':5, 'comment':'...'}   │
  └─────────────────────────────────────────┘
  
  **流程C: 组局活动完整链路**
  发布活动 → 用户报名 → 支付费用 → 活动群聊 → 活动完成
  ┌─────────────────────────────────────────┐
  │ 1. Content表：创建活动(type=2)           │
  │    data={time, location, limit:6,       │
  │          price:6800, requirements}      │
  │                                          │
  │ 2. ContentAction表：用户报名(action=6)   │
  │    data={name, phone, gender, remark}   │
  │                                          │
  │ 3. ServiceOrder表：活动订单              │
  │    data={'activity_id':xxx, 'seat':3}   │
  │                                          │
  │ 4. UserWallet+Transaction：支付处理      │
  │                                          │
  │ 5. ChatConversation表：活动群聊(type=2)  │
  │    metadata={'activity_id':xxx,         │
  │              'member_limit':6}          │
  │                                          │
  │ 6. ChatParticipant表：所有报名者入群     │
  │    role=1普通成员, creator_id为群主      │
  └─────────────────────────────────────────┘
  
  **流程D: 消息通知完整链路**
  触发互动 → 生成通知 → 推送消息 → 查看处理
  ┌─────────────────────────────────────────┐
  │ 触发点：ContentAction(点赞/评论)         │
  │        UserRelation(关注)                │
  │        ServiceOrder(订单状态变更)        │
  │          ↓                               │
  │ 生成：Notification表创建通知记录         │
  │       type=1点赞/2评论/3关注/4系统        │
  │       data={sender_id, content_id,      │
  │             sender_name, action_type}   │
  │          ↓                               │
  │ 推送：WebSocket实时推送                  │
  │       APNs/FCM离线推送                   │
  │          ↓                               │
  │ 查看：消息页4个功能卡片分类展示           │
  │       点击通知 → 跳转原内容详情           │
  │          ↓                               │
  │ 处理：Notification.is_read=1已读         │
  │       系统通知可能有action按钮            │
  └─────────────────────────────────────────┘
end note

' ==========================================
' 🔄 数据计算逻辑说明
' ==========================================

note as ComputeLogic
  **计算优于存储 - 实时计算统计数据**
  
  **社交统计计算**
  ✓ 用户关注数：
    SELECT COUNT(*) FROM UserRelation 
    WHERE user_id=xxx AND type=1
  
  ✓ 用户粉丝数：
    SELECT COUNT(*) FROM UserRelation
    WHERE target_id=xxx AND type=1
  
  ✓ 内容点赞数：
    SELECT COUNT(*) FROM ContentAction
    WHERE content_id=xxx AND action=1
  
  ✓ 内容评论数：
    SELECT COUNT(*) FROM ContentAction
    WHERE content_id=xxx AND action=2
  
  ✓ 活动报名人数：
    SELECT COUNT(*) FROM ContentAction
    WHERE content_id=xxx AND action=6
  
  **话题热度计算**
  Topic.stats JSON缓存计算结果：
  {
    "participant_count": COUNT(DISTINCT user_id),
    "post_count": COUNT(content_id),
    "heat_score": 算法计算热度值,
    "last_update": "2025-10-12 10:00"
  }
  → 每小时重新计算一次，避免实时计算压力
  
  **未读消息计算**
  ✓ 对话未读数：
    SELECT COUNT(*) FROM ChatMessage m
    WHERE m.conversation_id=xxx
    AND m.created_at > p.last_read_time
    AND m.sender_id != current_user
  
  ✓ 通知未读数：
    SELECT COUNT(*) FROM Notification
    WHERE user_id=xxx AND is_read=0
    GROUP BY type
  
  **用户活跃度计算**
  基于多表综合计算：
  ✓ 发布内容数：Content表COUNT
  ✓ 互动次数：ContentAction表COUNT  
  ✓ 消息活跃：ChatMessage表COUNT
  ✓ 社交关系：UserRelation表COUNT
  → 存储到UserProfile.metadata.activity_score
end note

' ==========================================
' 🎨 JSON字段使用示例
' ==========================================

note as JSONExamples
  **JSON字段灵活扩展示例**
  
  **Content.data 动态扩展**
  // 动态发布 type=1
  {
    "text": "请你们看雪❄️",
    "topic_ids": [123, 456],
    "media_ids": [789, 790, 791],
    "location": "河北",
    "at_users": [111, 222],
    "visibility": "public"
  }
  
  // K歌组局 type=2
  {
    "title": "K歌两小时",
    "time": "2025-10-15 19:00:00",
    "location": "景田在线网咖",
    "address": "深圳市南山区松坪山乌石头路11号3层",
    "limit": 6,
    "current_count": 3,
    "price": 6800,
    "fee_detail": {"场地费": 3000, "饮品费": 2000, "其他": 1800},
    "requirements": {
      "gender": "mixed",
      "age_range": [18, 35],
      "skill_level": "不限"
    },
    "tags": ["新手友好", "定期组局"],
    "cover_image_id": 888
  }
  
  // 王者陪玩 type=3
  {
    "skill_type": "王者荣耀",
    "service_mode": "online",
    "price_list": [
      {"service": "上分", "price": 1500, "unit": "局"},
      {"service": "语音陪玩", "price": 1000, "unit": "小时"}
    ],
    "rank": "荣耀王者",
    "position": ["射手", "打野"],
    "heroes": ["后羿", "兰陵王"],
    "win_rate": 78,
    "voice_sample_id": 999,
    "gallery_ids": [101, 102, 103]
  }
  
  **UserProfile.metadata 用户扩展**
  {
    "email": "user@example.com",
    "real_name": "张三",
    "gender": "female",
    "birthday": "1999-09-29",
    "height": 170,
    "weight": 50,
    "city": "深圳",
    "district": "南山区",
    "wechat": "sunny0713",
    "wechat_unlock": "follow_required",
    "bio": "这里是个人介绍",
    "ip_location": "广东 深圳",
    "activity_score": 85,
    "last_online": "2025-10-12 15:30"
  }
  
  **Topic.stats 话题统计缓存**
  {
    "participant_count": 12000,
    "post_count": 35000,
    "heat_score": 98,
    "trend": "rising",
    "top_contributors": [123, 456, 789],
    "peak_time": "2025-10-10 20:00",
    "last_update": "2025-10-12 10:00",
    "related_topics": [111, 222]
  }
  
  **ChatMessage.media_data 图片点赞**
  {
    "media_id": 789,
    "caption": "请你们看雪",
    "like_count": 88,
    "like_users": [111, 222, 333],
    "view_count": 256
  }
  
  **Notification.data 通知扩展**
  {
    "sender_id": 456,
    "sender_name": "用户名称123",
    "sender_avatar": "https://cdn.../avatar.jpg",
    "content_id": 789,
    "content_preview": "请你们看雪",
    "action_type": "like",
    "thumbnail": "https://cdn.../thumb.jpg"
  }
  
  **ServiceOrder.data 订单扩展**
  {
    "service_type": "game_companion",
    "game_id": "王者荣耀",
    "requirements": "上分服务",
    "appointment_time": "2025-10-12 20:00",
    "estimated_duration": 2,
    "buyer_note": "希望温柔陪聊",
    "seller_note": "收到，准时开始",
    "status_history": [
      {"status": 0, "time": "2025-10-12 19:00", "note": "订单创建"},
      {"status": 1, "time": "2025-10-12 19:05", "note": "支付成功"}
    ]
  }
end note

@enduml